set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

Plugin 'othree/html5.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'suan/vim-instant-markdown'
"Plugin 'ruby-matchit'
Plugin 'vim-scripts/matchit.zip'
"Plugin 'Valloric/YouCompleteMe'
Plugin 'rizzatti/dash.vim'
Plugin 'xolox/vim-notes'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-rails'
Plugin 'scrooloose/nerdcommenter'
Plugin 'jiangmiao/auto-pairs'
"Plugin 'scrooloose/syntastic'
Plugin 'justinmk/vim-sneak'
Plugin 'VundleVim/Vundle.vim'
Plugin 'The-NERD-tree'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'zenburn'
Plugin 'tomasr/molokai'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'ctrlpvim/ctrlp.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" ________________________________________________________AFTER VUNDLE_______________________________________________ 

" Setting directory for where notes are placedj
:let g:notes_directories = ['/Volumes/STORAGE/Git/Notes']

" Easy copy to system clipboard
vmap <F9> "+y
" Easy paste from system clipboard
nmap <F10> "+p

"<C-P> to :CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Tagbar key map
nmap <F7> :TagbarToggle<CR>

"<F5> to :buffers
nnoremap <F5> :buffers<CR>:buffer<Space>
"<C-A> to copy all
nmap <C-a> mpggVG<F9>'p

" Automatically start NERDTree
" autocmd vimenter * NERDTree
" Map Ctrl+N to Nerd Tree
map <C-n> :NERDTreeToggle<CR>
" Keep Airline from disappearing when NERDTree is gone
set laststatus=2

set backspace=2 " make backspace work like most other apps

" For fast navigation
set relativenumber

syntax enable                   " Enable syntax highlighting

set hlsearch                    " Highlight search results
set incsearch                   " Jump to search results as you type

set softtabstop=4               " 2-space tabs
set shiftwidth=4
set expandtab
set autoindent			" auto indent

set cursorline                  " Highlight line cursor is on

" We can use different key mappings for easy navigation between splits to save a keystroke. So instead of ctrl-w then j, it’s just ctrl-j
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Open new split panes to right and bottom, which feels more natural than Vim’s default
set splitbelow
set splitright

" To get rid of annoying .swp files in every directory
set backupdir=./.backup,.,/tmp
set directory=./.backup,.,/tmp

" Syntastic recommended settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_scss_checkers = [ 'sass_lint' ] " Don't show warnings for include statements in scss files

" Don't show assigned but unsused variable error' in ruby
let g:syntastic_ruby_mri_quiet_messages = { 
            \ "type":  "style",
            \ "regex": 'assigned but unused variable' }
<
" Ignore warnings on meteor js
let g:syntastic_html_tidy_quiet_messages = { "level" : "warnings"  }
let g:syntastic_html_tidy_ignore_errors = [ '<template> is not recognized!'  ]
" Ignore eruby warnings
let g:syntastic_eruby_ruby_quiet_messages =
    \ {'regex': 'possibly useless use of'}

if !has("gui_running")
    colorscheme Solarized
    set background=dark
    let g:airline_theme='solarized'
    set t_Co=256
endif
" Toggle background
call togglebg#map("<F6>")


