set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

Plugin 'tommcdo/vim-lion'
"Plugin 'posva/vim-vue'
Plugin 'pangloss/vim-javascript'
Plugin 'jparise/vim-graphql'
"Plugin 'xuhdev/vim-latex-live-preview'
Plugin 'w0rp/ale'
Plugin 'sheerun/vim-polyglot'
"Plugin 'moll/vim-node'
Plugin 'The-NERD-tree'
Plugin 'Valloric/YouCompleteMe'
Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'jiangmiao/auto-pairs'
"Plugin 'justinmk/vim-sneak'
"Plugin 'kchmck/vim-coffee-script'
"Plugin 'majutsushi/tagbar'
"Plugin 'othree/html5.vim'
"Plugin 'rhysd/vim-grammarous'
"Plugin 'rizzatti/dash.vim'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'suan/vim-instant-markdown'
"Plugin 'tomasr/molokai'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-scripts/matchit.zip'
"Plugin 'xolox/vim-easytags'
"Plugin 'xolox/vim-misc'
"Plugin 'zenburn'
"Plugin 'ruby-matchit'

"All of your Plugins must be added before the following line
call vundle#end()            "required
filetype plugin indent on    "required

"___________________________________________________AFTER VUNDLE___________________________________________________

" ignore python3 errors
silent! py3 pass

"Spacebar folding
nnoremap <space> za
vnoremap <space> zf

"Set default register to system clipboard
set clipboard=unnamed

"<C-P> to :CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

"Tagbar key map
nmap <F7> :TagbarToggle<CR>

"<F5> to :buffers
nnoremap <F5> :buffers<CR>:buffer<Space>

"Map Ctrl+N to Nerd Tree
map <C-n> :NERDTreeToggle<CR>

"Keep Airline from disappearing when NERDTree is gone
set laststatus=2

"make backspace work like most other apps
set backspace=2
"For fast navigation
set relativenumber
set number

" Damian Conway's Die Blinkënmatchen: highlight matches
nnoremap <silent> n n:call HLNext(0.1)<cr>
nnoremap <silent> N N:call HLNext(0.1)<cr>

function! HLNext (blinktime)
  let target_pat = '\c\%#'.@/
  let ring = matchadd('ErrorMsg', target_pat, 101)
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  call matchdelete(ring)
  redraw
endfunction

"Enable syntax highlighting
syntax enable

"Highlight search results
set hlsearch

"Jump to search results as you type
set incsearch

"2-space tabs
set softtabstop=2
set shiftwidth=2
set expandtab

"auto indent
set autoindent

"Highlight line cursor is on
set cursorline

"We can use different key mappings for easy navigation between splits to save a keystroke. So instead of ctrl-w then j, it’s just ctrl-j
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"Open new split panes to right and bottom, which feels more natural than Vim’s default
set splitbelow
set splitright

"To get rid of annoying .swp files in every directory
set backupdir=./.backup,.,/tmp
set directory=./.backup,.,/tmp

if !has("gui_running")
    colorscheme Solarized
    set background=dark
    let g:airline_theme='solarized'
    set t_Co=256
endif

"Toggle background
call togglebg#map("<F6>")

"Persistent undos [MUST run 'mkdir ~/.vim/undodir' for this to work]
if !&diff
  set undodir=~/.vim/undodir
  set undofile
endif

"----------------YOUCOMPLETEME----------------
let g:ycm_key_list_select_completion = ['<C-J>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-K>', '<Up>']
set completeopt-=preview
"----------------YOUCOMPLETEME----------------

"__________________DOCUMENTS__________________
"Turn on spell check in specific files
autocmd FileType markdown :setlocal spell spelllang=en_us
autocmd FileType text :setlocal spell spelllang=en_us
autocmd FileType tex :setlocal spell spelllang=en_us

"Set textwidth to 80 in specific files
autocmd FileType markdown :setlocal textwidth=80
autocmd FileType text :setlocal textwidth=80
autocmd FileType tex :setlocal textwidth=80
"__________________DOCUMENTS__________________

"_______________vim-grammarous_______________
"let g:grammarous#hooks = {}
"function! g:grammarous#hooks.on_check(errs) abort
    "nmap <buffer>gn <Plug>(grammarous-move-to-next-error)<Plug>(grammarous-open-info-window)
    "nmap <buffer>gp <Plug>(grammarous-move-to-previous-error)
    "nmap <buffer>gr <Plug>(grammarous-remove-error)
    "nmap <buffer>gf <Plug>(grammarous-fixit)
    "nmap <buffer>gR <Plug>(grammarous-disable-rule)
"endfunction
"function! g:grammarous#hooks.on_reset(errs) abort
    "nunmap <buffer>gn
    "nunmap <buffer>gp
    "nunmap <buffer>gr
    "nunmap <buffer>gf
    "nunmap <buffer>gR
"endfunction
"let g:grammarous#disabled_rules = {
            "\ '*' : ['WHITESPACE_RULE', 'EN_QUOTES'],
            "\ 'help' : ['WHITESPACE_RULE', 'EN_QUOTES', 'SENTENCE_WHITESPACE', 'UPPERCASE_SENTENCE_START'],
            "\ }
"_______________vim-grammarous_______________
"
"_______________vim-latex-live-preview_______________
let g:livepreview_previewer = 'open -a Skim'
autocmd Filetype tex setl updatetime=1
"_______________vim-latex-live-preview_______________

"------------------vim-lion------------------
let g:lion_squeeze_spaces = 1
"------------------vim-lion------------------

"------------------ale------------------
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
let g:ale_linters = {
\  'javascript': ['eslint'],
\}
let g:ale_fixers = {
\  'javascript': ['eslint'],
\}
let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1
let g:ale_echo_msg_format = '%linter% says %s'
let g:ale_pattern_options = {
\   '.*dist/.*\.js$': {'ale_enabled': 0},
\}
"------------------ale------------------
